<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Checkout.Application</name>
    </assembly>
    <members>
        <member name="M:Checkout.Application.ApplicationMappingProfile.CreateMaps``2">
            <summary>
            Creates a two way automap configuration
            </summary>
        </member>
        <member name="T:Checkout.PagedResultDto`1">
            <summary>
            an object containing paged result data
            </summary>
        </member>
        <member name="T:Checkout.PagerDto">
            <summary>
            an object for containing paging related data
            </summary>
        </member>
        <member name="M:Checkout.Caching.ICacheService.Get``1(System.String,System.DateTime,System.Delegate,System.Object[])">
            <summary>
            gets cached data for a given cache key for a given delegate. If not previously cached the delegate result is cached with custom expiration
            </summary>
        </member>
        <member name="M:Checkout.Caching.ICacheService.Get``1(System.String,System.Delegate,System.Object[])">
            <summary>
            gets cached data for a given cache key for a given delegate. If not previously cached the delegate result is cached with maximum expiration
            </summary>
        </member>
        <member name="M:Checkout.Caching.ICacheService.Remove(System.String)">
            <summary>
            Removes a cached item
            </summary>
        </member>
        <member name="M:Checkout.Caching.ICacheService.Set``1(System.String,``0,System.DateTime)">
            <summary>
            Sets data for a given cache key
            </summary>
        </member>
        <member name="T:Checkout.Cart.CartDto">
            <summary>
            an object describing a logic cart and items currently associated
            </summary>
        </member>
        <member name="T:Checkout.Cart.CartItemDto">
            <summary>
            an object which defines the minimum requirements for a valid cart item (product)
            </summary>
        </member>
        <member name="P:Checkout.Cart.CartItemDto.CartId">
            <summary>
            Unique Id of an existing cart to update. When empty creates new cart
            </summary>
        </member>
        <member name="P:Checkout.Cart.CartItemDto.CountryId">
            <summary>
            Country the cart relates to
            </summary>
        </member>
        <member name="P:Checkout.Cart.CartItemDto.ProductId">
            <summary>
            Product to add/update
            </summary>
        </member>
        <member name="T:Checkout.Cart.CartProductDto">
            <summary>
            an oject describing a logical product as part of a cart
            </summary>
        </member>
        <member name="M:Checkout.Cart.ICartRepository.GetAsync(System.Guid)">
            <summary>
            Gets a cart for a given Id reference
            </summary>
        </member>
        <member name="M:Checkout.Cart.ICartRepository.GetAsync(System.Guid,System.Int32)">
            <summary>
            Gets an item from a cart by a given cart id and product id
            </summary>
        </member>
        <member name="M:Checkout.Cart.ICartRepository.RemoveAsync(System.Guid)">
            <summary>
            Removes an instance of a cart
            </summary>
        </member>
        <member name="M:Checkout.Cart.ICartRepository.RemoveAsync(System.Guid,System.Int32)">
            <summary>
            Removes a product on an existing cart
            </summary>
        </member>
        <member name="M:Checkout.Cart.ICartRepository.SaveAsync(Checkout.Models.CartEntity)">
            <summary>
            Saves and cart prouct. Performs Upsert logic based on the existance of unique Id, when 0 add else update
            </summary>
        </member>
        <member name="M:Checkout.Cart.ICartService.GetByIdAsync(System.Guid)">
            <summary>
            Gets a cart by a given ID reference
            </summary>
        </member>
        <member name="M:Checkout.Cart.ICartService.RemoveAsync(System.Guid)">
            <summary>
            ´Removes a cart and its associated cart items
            </summary>
        </member>
        <member name="M:Checkout.Cart.ICartService.RemoveAsync(System.Guid,System.Int32)">
            <summary>
            ´Removes product from a cart 
            </summary>
        </member>
        <member name="M:Checkout.Cart.ICartService.SaveAsync(Checkout.Cart.CartItemDto)">
            <summary>
            Saves an item to a cart, if cart Id is not present a new cart is created with the product added
            </summary>
        </member>
        <member name="M:Checkout.Extensions.MapperExtensions.Map``1(System.Object)">
            <summary>
            Automapper wrapper. Maps a source object to destination based on mapping configurations
            </summary>
        </member>
        <member name="M:Checkout.Extensions.MapperExtensions.MapList``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Automapper wrapper. Maps a source object to destination based on mapping configurations
            </summary>
        </member>
        <member name="T:Checkout.Extensions.QueryExtensions">
            <summary>
            Query extensions for paging Iqueryabes results
            </summary>
        </member>
        <member name="M:Checkout.Extensions.QueryExtensions.Paged``1(System.Linq.IQueryable{``0},Checkout.PagerDto)">
            <summary>
            page a query
            </summary>
        </member>
        <member name="M:Checkout.Inventory.IProductRepository.GetAsync(Checkout.PagerDto,System.Int16,System.Nullable{System.Boolean})">
            <summary>
            Gets a paged result of products based on isactive filter (when supplied)
            </summary>
            <param name="pager">A paging object to return results against</param>
            <param name="countryId">Which country to get results for</param>
            <param name="isActive">Optional boolean param to indicate whether to retrieve active items by a given state. When empty returns all</param>
        </member>
        <member name="M:Checkout.Inventory.IProductRepository.GetByIdAsync(System.Int32)">
            <summary>
            Gets an instance of product Id by a given Id reference
            </summary>
            <param name="id">Id reference to search for</param>
        </member>
        <member name="M:Checkout.Inventory.IProductService.GetAsync(Checkout.PagerDto,System.Int16)">
            <summary>
            Gets a paged collection of active products by a given country Id reference
            </summary>
        </member>
        <member name="M:Checkout.Inventory.IProductService.GetByIdAsync(System.Int32)">
            <summary>
            Gets a product by a given Id reference
            </summary>
        </member>
        <member name="T:Checkout.Inventory.ProductRepository">
            <summary>
            Repository for CRUD product related queries
            </summary>
        </member>
        <member name="T:Checkout.Location.CountryRepository">
            <summary>
            Repository for CRUD country related queries
            </summary>
        </member>
        <member name="M:Checkout.Location.ICountryRepository.GetAsync(System.Nullable{System.Boolean})">
            <summary>
            Gets a paged result of countries based on isactive filter (when supplied)
            </summary>
            <param name="isActive">Optional boolean param to indicate whether to retrieve active items by a given state. When empty returns all</param>
        </member>
        <member name="M:Checkout.Location.ICountryRepository.GetByIdAsync(System.Int16)">
            <summary>
            Gets an instance of a country by a given Id reference
            </summary>
            <param name="id">Country Id</param>
        </member>
        <member name="M:Checkout.Location.ICountryService.Get">
            <summary>
            Gets a collection of active countries as part of order process
            </summary>
        </member>
        <member name="M:Checkout.Location.ICountryService.GetByIdAsync(System.Int16)">
            <summary>
            Gets a country by a given Id reference
            </summary>
        </member>
    </members>
</doc>
